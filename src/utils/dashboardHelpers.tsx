import React from 'react'

export const formatDuration = (minutes: number) => {
  const absMinutes = Math.abs(minutes)
  const days = Math.floor(absMinutes / 1440)
  const hours = Math.floor((absMinutes % 1440) / 60)
  const mins = absMinutes % 60
  const parts: string[] = []

  if (days > 0) {
    parts.push(`${days} –¥`)
  }

  if (hours > 0 || days > 0) {
    parts.push(`${hours} —á`)
    parts.push(`${mins} –º–∏–Ω`)
  } else {
    parts.push(`${mins} –º–∏–Ω`)
  }

  return parts.join(' ')
}

export const formatTime = (date: Date) =>
  date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })

const ACTIVITY_INFO_MAP: Record<
  string,
  { icon: string; label: string; color: string; bgColor: string; extraInfo: string | null }
> = {
  '–•–æ–¥—å–±–∞': {
    icon: '/icons/walking.png',
    label: '–•–æ–¥—å–±–∞',
    color: 'bg-green-100 text-green-600',
    bgColor: 'bg-green-50',
    extraInfo: 'üö∂ –•–æ–¥—å–±–∞'
  },
  '–ò–≥—Ä—ã –Ω–∞ –∂–∏–≤–æ—Ç–∏–∫–µ': {
    icon: '/icons/belly.png',
    label: '–ò–≥—Ä—ã –Ω–∞ –∂–∏–≤–æ—Ç–∏–∫–µ',
    color: 'bg-blue-100 text-blue-600',
    bgColor: 'bg-blue-50',
    extraInfo: 'ü§± –ò–≥—Ä—ã –Ω–∞ –∂–∏–≤–æ—Ç–∏–∫–µ'
  },
  '–ú–∞—Å—Å–∞–∂': {
    icon: '/icons/massage.png',
    label: '–ú–∞—Å—Å–∞–∂',
    color: 'bg-purple-100 text-purple-600',
    bgColor: 'bg-purple-50',
    extraInfo: 'üíÜ –ú–∞—Å—Å–∞–∂'
  },
  '–¢–∞–Ω—Ü—ã –∏ –º—É–∑—ã–∫–∞': {
    icon: '/icons/dance.png',
    label: '–¢–∞–Ω—Ü—ã –∏ –º—É–∑—ã–∫–∞',
    color: 'bg-orange-100 text-orange-600',
    bgColor: 'bg-orange-50',
    extraInfo: 'üéµ –¢–∞–Ω—Ü—ã –∏ –º—É–∑—ã–∫–∞'
  }
}

export interface TypeInfo {
  icon: React.ReactNode
  label: string
  color: string
  bgColor: string
  description: string
  extraInfo: string | null
}

export const getTypeInfo = (type: string, item: any): TypeInfo => {
  switch (type) {
    case 'feeding':
      return {
        icon: <img src="/icons/feeding.png" alt="–ö–æ—Ä–º–ª–µ–Ω–∏–µ" className="w-9 h-9 object-contain" />,
        label: '–ö–æ—Ä–º–ª–µ–Ω–∏–µ',
        color: 'bg-blue-100 text-blue-600',
        bgColor: 'bg-blue-50',
        description: '',
        extraInfo: item.ounces ? `üçº ${item.ounces} —É–Ω—Ü` : null
      }
    case 'diaper':
      return {
        icon: <img src="/icons/poor.png" alt="–ü–æ–¥–≥—É–∑–Ω–∏–∫–∏ –ø–æ–ª–Ω—ã–µ" className="w-9 h-9 object-contain" />,
        label: '–ü–æ–¥–≥—É–∑–Ω–∏–∫–∏ –ø–æ–ª–Ω—ã–µ',
        color: 'bg-green-100 text-green-600',
        bgColor: 'bg-green-50',
        description: '',
        extraInfo: item.diaper_type === '–ú–æ–∫—Ä—ã–π' ? 'üíß –ú–æ–∫—Ä—ã–π' : 'üí© –ì—Ä—è–∑–Ω—ã–π'
      }
    case 'bath':
      return {
        icon: <img src="/icons/bath.png" alt="–ö—É–ø–∞–Ω–∏–µ" className="w-9 h-9 object-contain" />,
        label: '–ö—É–ø–∞–Ω–∏–µ',
        color: 'bg-yellow-100 text-yellow-600',
        bgColor: 'bg-yellow-50',
        description: '',
        extraInfo: item.bath_mood === '–î–æ–≤–æ–ª—å–Ω—ã–π' ? 'üòä –î–æ–≤–æ–ª—å–Ω—ã–π' : 'üò¢ –ù–µ–¥–æ–≤–æ–ª–µ–Ω'
      }
    case 'activity': {
      const activityInfo =
        ACTIVITY_INFO_MAP[item.activity_type as string] ?? {
          icon: '/icons/activity.png',
          label: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
          color: 'bg-gray-100 text-gray-600',
          bgColor: 'bg-gray-50',
          extraInfo: item.activity_type ? `üèÉ ${item.activity_type}` : null
        }

      return {
        icon: <img src={activityInfo.icon} alt={activityInfo.label} className="w-9 h-9 object-contain" />,
        label: activityInfo.label,
        color: activityInfo.color,
        bgColor: activityInfo.bgColor,
        description: '',
        extraInfo: activityInfo.extraInfo
      }
    }
    case 'sleep': {
      const hasEnded = Boolean(item?.end_time)
      const computedDuration = (() => {
        if (typeof item?.duration_minutes === 'number' && item.duration_minutes > 0) {
          return item.duration_minutes as number
        }
        if (hasEnded && item.start_time && item.end_time) {
          const start = new Date(item.start_time).getTime()
          const end = new Date(item.end_time).getTime()
          if (!Number.isNaN(start) && !Number.isNaN(end) && end > start) {
            return Math.max(1, Math.floor((end - start) / (1000 * 60)))
          }
        }
        return undefined
      })()

      if (hasEnded) {
        const durationText = typeof computedDuration === 'number' ? formatDuration(computedDuration) : null
        return {
          icon: <img src="/icons/sleep.png" alt="–°–æ–Ω" className="w-9 h-9 object-contain" />,
          label: '–°–æ–Ω',
          color: 'bg-indigo-100 text-indigo-600',
          bgColor: 'bg-indigo-50',
          description: '',
          extraInfo: durationText ? `üò¥ ${durationText}` : null
        }
      }

      return {
        icon: <img src="/icons/sleep.png" alt="–°–æ–Ω –Ω–∞—á–∞—Ç" className="w-9 h-9 object-contain" />,
        label: '–°–æ–Ω –Ω–∞—á–∞—Ç',
        color: 'bg-indigo-100 text-indigo-600',
        bgColor: 'bg-indigo-50',
        description: '',
        extraInfo: 'üò¥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ'
      }
    }
    default:
      return {
        icon: <img src="/icons/activity.png" alt="–î—Ä—É–≥–æ–µ" className="w-9 h-9 object-contain" />,
        label: '–î—Ä—É–≥–æ–µ',
        color: 'bg-gray-100 text-gray-600',
        bgColor: 'bg-gray-50',
        description: '',
        extraInfo: null
      }
  }
}

export const calculateAgeInMonths = (birthDate: string, now: Date = new Date()) => {
  const birth = new Date(birthDate)
  const diffInMonths = (now.getFullYear() - birth.getFullYear()) * 12 + (now.getMonth() - birth.getMonth())
  return Math.max(0, diffInMonths)
}
