import React, { useState, useEffect, useCallback } from 'react'
import { useAuth } from '../contexts/AuthContext'
import { dataService, Feeding, Diaper, Bath, ParentCoins, SleepSession } from '../services/dataService'
import QuickActionModal from '../components/QuickActionModal'

type BabyState = 'ok' | 'feeding' | 'all-in' | 'poo' | 'dirty'
type QuickActionType = 'feeding' | 'diaper' | 'bath' | 'activity'

interface TamagotchiData {
  lastFeeding: Feeding | null
  lastDiaper: Diaper | null
  lastBath: Bath | null
  parentCoins: ParentCoins | null
  currentSleepSession: SleepSession | null
  familySleepStatus: { isSleeping: boolean; sleepSession: SleepSession | null }
}

interface SettingsState {
  feedingInterval: number
  diaperInterval: number
  bathInterval: number
  sleepMonitoringEnabled: boolean
  wakeOnActivityEnabled: boolean
}

export default function TamagotchiPage() {
  console.log('TamagotchiPage rendered') // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  
  const [data, setData] = useState<TamagotchiData | null>(null)
  const [settings, setSettings] = useState<SettingsState>({
    feedingInterval: 3,
    diaperInterval: 2,
    bathInterval: 1,
    sleepMonitoringEnabled: true,
    wakeOnActivityEnabled: true
  })
  const [loading, setLoading] = useState(true)
  const [babyState, setBabyState] = useState<BabyState>('ok')
  const [modalOpen, setModalOpen] = useState(false)
  const [modalAction, setModalAction] = useState<QuickActionType>('feeding')
  const [score, setScore] = useState(0)
  const [justWokeUp, setJustWokeUp] = useState(false)
  const [scoreAnimation, setScoreAnimation] = useState(false)
  const [coins, setCoins] = useState<Array<{id: number, x: number, y: number, collected: boolean, falling: boolean, icon: string, type: 'feeding_coins' | 'diaper_coins' | 'bath_coins' | 'activity_coins' | 'mom_coins' | 'sleep_coins'}>>([])
  const [coinSpawnInterval, setCoinSpawnInterval] = useState<NodeJS.Timeout | null>(null)
  const [isSleepMode, setIsSleepMode] = useState(false)
  
  // –û—Ç–¥–µ–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –º–æ–Ω–µ—Ç–æ–∫
  const [feedingCoins, setFeedingCoins] = useState(0)
  const [diaperCoins, setDiaperCoins] = useState(0)
  const [bathCoins, setBathCoins] = useState(0)
  const [activityCoins, setActivityCoins] = useState(0)
  const [momCoins, setMomCoins] = useState(0)
  const [sleepCoins, setSleepCoins] = useState(0)

  const { member, family } = useAuth()

  const fetchData = useCallback(async () => {
    if (!member || !family) {
      return
    }

    try {
      setLoading(true)
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–Ω–∞
      const wasSleeping = isSleepMode
      
      const [lastFeeding, lastDiaper, lastBath, settingsFromDb, parentCoins, currentSleepSession, familySleepStatus] = await Promise.all([
        dataService.getLastFeeding(),
        dataService.getLastDiaper(),
        dataService.getLastBath(),
        dataService.getSettings(),
        dataService.getParentCoins(),
        dataService.getCurrentSleepSession(),
        dataService.getFamilySleepStatus()
      ])

      setData({
        lastFeeding,
        lastDiaper,
        lastBath,
        parentCoins,
        currentSleepSession,
        familySleepStatus
      })

      if (settingsFromDb) {
        setSettings(prev => ({
          ...prev,
          feedingInterval: settingsFromDb.feed_interval ?? prev.feedingInterval,
          diaperInterval: settingsFromDb.diaper_interval ?? prev.diaperInterval,
          bathInterval: settingsFromDb.bath_reminder_period ?? prev.bathInterval,
          sleepMonitoringEnabled: settingsFromDb.sleep_monitoring_enabled ?? prev.sleepMonitoringEnabled,
          wakeOnActivityEnabled: settingsFromDb.wake_on_activity_enabled ?? prev.wakeOnActivityEnabled
        }))
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–Ω–∞
      const isCurrentlySleeping = familySleepStatus?.isSleeping ?? false
      setIsSleepMode(isCurrentlySleeping)
      
      // –ï—Å–ª–∏ –º–∞–ª—ã—à –±—ã–ª –≤ —Ä–µ–∂–∏–º–µ —Å–Ω–∞ –∏ —Ç–µ–ø–µ—Ä—å –Ω–µ —Å–ø–∏—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–∏
      if (wasSleeping && !isCurrentlySleeping && settings.wakeOnActivityEnabled) {
        setJustWokeUp(true)
        // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          setJustWokeUp(false)
        }, 5000)
      }
      
    } catch (error) {
      console.error('Error fetching tamagotchi data:', error)
    } finally {
      setLoading(false)
    }
  }, [member, family, isSleepMode, settings.wakeOnActivityEnabled])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞–ª—ã—à–∞
  const calculateBabyState = useCallback((): BabyState => {
    if (!data) return 'ok'

    const now = Date.now()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–º–ª–µ–Ω–∏–µ
    const feedingOverdue = data.lastFeeding && 
      (now - new Date(data.lastFeeding.timestamp).getTime()) > (settings.feedingInterval * 60 * 60 * 1000)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–≥—É–∑–Ω–∏–∫
    const diaperOverdue = data.lastDiaper && 
      (now - new Date(data.lastDiaper.timestamp).getTime()) > (settings.diaperInterval * 60 * 60 * 1000)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ø–∞–Ω–∏–µ
    const bathOverdue = data.lastBath && 
      (now - new Date(data.lastBath.timestamp).getTime()) > (settings.bathInterval * 24 * 60 * 60 * 1000)

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    if (feedingOverdue && diaperOverdue) return 'all-in'
    if (feedingOverdue) return 'feeding'
    if (diaperOverdue) return 'poo'
    if (bathOverdue) return 'dirty'
    
    return 'ok'
  }, [data, settings])

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  useEffect(() => {
    const interval = setInterval(() => {
      setBabyState(calculateBabyState())
    }, 60000) // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    return () => clearInterval(interval)
  }, [calculateBabyState])

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
  useEffect(() => {
    if (data?.familySleepStatus) {
      setIsSleepMode(data.familySleepStatus.isSleeping)
    }
  }, [data?.familySleepStatus])

  useEffect(() => {
    if (!member || !family) {
      return
    }

    fetchData()
  }, [member, family, fetchData])

  useEffect(() => {
    setBabyState(calculateBabyState())
  }, [calculateBabyState])

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç –∫–∞–∂–¥—ã–µ 3-7 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    const startCoinSpawning = () => {
      const spawnInterval = () => {
        const delay = Math.random() * 4000 + 3000 // 3-7 —Å–µ–∫—É–Ω–¥
        const timeout = setTimeout(() => {
          spawnCoin()
          spawnInterval() // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –º–æ–Ω–µ—Ç–∫—É
        }, delay)
        setCoinSpawnInterval(timeout)
      }
      spawnInterval()
    }

    startCoinSpawning()

    return () => {
      if (coinSpawnInterval) {
        clearTimeout(coinSpawnInterval)
      }
    }
  }, [babyState, isSleepMode]) // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞–ª—ã—à–∞ –∏–ª–∏ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–µ—Ç–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
  useEffect(() => {
    if (data?.parentCoins) {
      setFeedingCoins(data.parentCoins.feeding_coins)
      setDiaperCoins(data.parentCoins.diaper_coins)
      setBathCoins(data.parentCoins.bath_coins)
      setActivityCoins(data.parentCoins.activity_coins || 0)
      setMomCoins(data.parentCoins.mom_coins)
      setSleepCoins(data.parentCoins.sleep_coins || 0)
      setScore(data.parentCoins.total_score)
    }
  }, [data?.parentCoins])

  const getGifSource = (state: BabyState): string => {
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Å–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ —Å–Ω–∞
    if (isSleepMode) {
      return '/icons/sleep.MP4'
    }
    
    switch (state) {
      case 'ok':
        return '/icons/ok.gif'
      case 'feeding':
        return '/icons/feeding.gif'
      case 'all-in':
        return '/icons/all-in.gif'
      case 'poo':
        return '/icons/poo.gif'
      case 'dirty':
        return '/icons/dirty.gif'
      default:
        return '/icons/ok.gif'
    }
  }

  const toggleSleepMode = async () => {
    try {
      if (isSleepMode) {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é —Å–Ω–∞
        const endedSession = await dataService.endSleepSession()
        if (endedSession) {
          console.log('üåô Sleep session ended:', endedSession)
          // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç–∫–∏ –∑–∞ —Å–æ–Ω
          await dataService.addCoins('sleep_coins', 1)
        }
      } else {
        // –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é —Å–Ω–∞
        const startedSession = await dataService.startSleepSession()
        if (startedSession) {
          console.log('üåô Sleep session started:', startedSession)
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      await fetchData()
    } catch (error) {
      console.error('Error toggling sleep mode:', error)
    }
  }

  const getStateDescription = (state: BabyState): string => {
    // –ï—Å–ª–∏ –º–∞–ª—ã—à —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–æ—Å–Ω—É–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (justWokeUp) {
      return "üåÖ –ú–∞–ª—ã—à –ø—Ä–æ—Å–Ω—É–ª—Å—è –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!"
    }
    
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Å–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (isSleepMode && data?.familySleepStatus?.sleepSession) {
      const sleepSession = data.familySleepStatus.sleepSession
      const startTime = new Date(sleepSession.start_time)
      const durationMinutes = Math.floor((Date.now() - startTime.getTime()) / (1000 * 60))
      const hours = Math.floor(durationMinutes / 60)
      const minutes = durationMinutes % 60
      
      let durationText = ''
      if (hours > 0) {
        durationText = `${hours}—á ${minutes}–º`
      } else {
        durationText = `${minutes} –º–∏–Ω—É—Ç`
      }
      
      if (settings.sleepMonitoringEnabled) {
        return `üò¥ –ú–∞–ª—ã—à —Å–ø–∏—Ç —É–∂–µ ${durationText} (–≤–∫–ª—é—á–∏–ª: ${sleepSession.author_name})`
      } else {
        return `üò¥ –ú–∞–ª—ã—à —Å–ø–∏—Ç —É–∂–µ ${durationText}`
      }
    } else if (isSleepMode) {
      return "üò¥ –ú–∞–ª—ã—à —Å–ø–∏—Ç —Å–ª–∞–¥–∫–∏–º —Å–Ω–æ–º..."
    }
    
    return getStatePhrase(state, score)
  }

  const handleItemClick = (action: QuickActionType) => {
    setModalAction(action)
    setModalOpen(true)
  }

  const handleModalSuccess = () => {
    fetchData() // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    setModalOpen(false)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ—á–∫–æ–≤
  const getStatePhrase = (state: BabyState, currentScore: number): string => {
    const scoreLevel = Math.floor(currentScore / 10)
    
    switch (state) {
      case 'feeding':
        const feedingPhrases = [
          "–ü–æ–∫–æ—Ä–º–∏ –º–µ–Ω—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!",
          "–Ø –æ—á–µ–Ω—å –≥–æ–ª–æ–¥–Ω—ã–π –º–∞–ª—ã—à!",
          "–ú–∞–º, –≥–¥–µ –º–æ—è –±—É—Ç—ã–ª–æ—á–∫–∞?",
          "–í—Ä–µ–º—è –æ–±–µ–¥–∞ —É–∂–µ –ø—Ä–∏—à–ª–æ!",
          "–Ø —Ö–æ—á—É –∫—É—à–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
          "–ü–æ–∫–æ—Ä–º–∏ –º–µ–Ω—è, –∏ —è –±—É–¥—É —Å—á–∞—Å—Ç–ª–∏–≤!",
          "–ú–æ–π –∂–∏–≤–æ—Ç–∏–∫ —É—Ä—á–∏—Ç –æ—Ç –≥–æ–ª–æ–¥–∞!",
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π –º–Ω–µ –ø–æ–∫—É—à–∞—Ç—å!",
          "–Ø —Ç–∞–∫ —Ö–æ—á—É –º–æ–ª–æ—á–∫–∞!",
          "–ö–æ—Ä–º–ª–µ–Ω–∏–µ - —ç—Ç–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ!"
        ]
        return feedingPhrases[scoreLevel % feedingPhrases.length]
      
      case 'poo':
        const diaperPhrases = [
          "–ü–æ—Ä–∞ —Å–º–µ–Ω–∏—Ç—å –ø–æ–¥–≥—É–∑–Ω–∏–∫!",
          "–ú–Ω–µ –Ω–µ–∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –≤ —ç—Ç–æ–º –ø–æ–¥–≥—É–∑–Ω–∏–∫–µ!",
          "–ú–∞–º–∞, –ø–æ–º–æ–≥–∏ –º–Ω–µ!",
          "–Ø —Ö–æ—á—É –±—ã—Ç—å —á–∏—Å—Ç—ã–º –º–∞–ª—ã—à–æ–º!",
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–º–µ–Ω–∏ –ø–æ–¥–≥—É–∑–Ω–∏–∫!",
          "–ú–Ω–µ –Ω—É–∂–Ω–∞ —Å–≤–µ–∂–∞—è –æ–¥–µ–∂–¥–∞!",
          "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ!",
          "–ü–æ–º–æ–≥–∏ –º–Ω–µ —Å—Ç–∞—Ç—å —á–∏—Å—Ç—ã–º!",
          "–ü–æ–¥–≥—É–∑–Ω–∏–∫ –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å!",
          "–Ø —Ö–æ—á—É –±—ã—Ç—å —Å—É—Ö–∏–º –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º!"
        ]
        return diaperPhrases[scoreLevel % diaperPhrases.length]
      
      case 'dirty':
        const bathPhrases = [
          "–ü–æ—Ä–∞ –∏—Å–∫—É–ø–∞—Ç—å –º–µ–Ω—è!",
          "–Ø —Ö–æ—á—É –±—ã—Ç—å —á–∏—Å—Ç—ã–º –º–∞–ª—ã—à–æ–º!",
          "–í—Ä–µ–º—è –≤–æ–¥–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä!",
          "–ú–Ω–µ –Ω—É–∂–Ω–∞ –≤–∞–Ω–Ω–æ—á–∫–∞!",
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–∫—É–ø–∞–π –º–µ–Ω—è!",
          "–Ø –ª—é–±–ª—é –∫—É–ø–∞—Ç—å—Å—è!",
          "–í–æ–¥–∞ - —ç—Ç–æ —Ç–∞–∫ –≤–µ—Å–µ–ª–æ!",
          "–ü–æ–º–æ–≥–∏ –º–Ω–µ —Å—Ç–∞—Ç—å —á–∏—Å—Ç—ã–º!",
          "–ö—É–ø–∞–Ω–∏–µ - —ç—Ç–æ –∑–¥–æ—Ä–æ–≤–æ!",
          "–Ø —Ö–æ—á—É –ø–æ–ø–ª–µ—Å–∫–∞—Ç—å—Å—è –≤ –≤–æ–¥–µ!"
        ]
        return bathPhrases[scoreLevel % bathPhrases.length]
      
      case 'all-in':
        const allInPhrases = [
          "–ú–Ω–µ –Ω—É–∂–Ω–æ –∏ –∫—É—à–∞—Ç—å, –∏ —Å–º–µ–Ω–∏—Ç—å –ø–æ–¥–≥—É–∑–Ω–∏–∫!",
          "–Ø –æ—á–µ–Ω—å –Ω—É–∂–¥–∞—é—Å—å –≤ —Ç–≤–æ–µ–π –ø–æ–º–æ—â–∏!",
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–∞–±–æ—Ç—å—Å—è –æ–±–æ –º–Ω–µ!",
          "–ú–Ω–µ –Ω—É–∂–Ω–∞ –∑–∞–±–æ—Ç–∞ –∏ –≤–Ω–∏–º–∞–Ω–∏–µ!",
          "–Ø —Ö–æ—á—É –±—ã—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤—ã–º –º–∞–ª—ã—à–æ–º!",
          "–ü–æ–º–æ–≥–∏ –º–Ω–µ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —Ö–æ—Ä–æ—à–æ!",
          "–Ø —Ç–∞–∫ –Ω—É–∂–¥–∞—é—Å—å –≤ —Ç–≤–æ–µ–π –ª—é–±–≤–∏!",
          "–ü–æ–∑–∞–±–æ—Ç—å—Å—è –æ–±–æ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!",
          "–ú–Ω–µ –Ω—É–∂–Ω–∞ —Ç–≤–æ—è –ø–æ–º–æ—â—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
          "–Ø —Ö–æ—á—É –±—ã—Ç—å –∑–¥–æ—Ä–æ–≤—ã–º –∏ —Å—á–∞—Å—Ç–ª–∏–≤—ã–º!"
        ]
        return allInPhrases[scoreLevel % allInPhrases.length]
      
      case 'ok':
      default:
        const okPhrases = [
          "–Ø —Å—á–∞—Å—Ç–ª–∏–≤—ã–π –º–∞–ª—ã—à!",
          "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–±–æ—Ç—É!",
          "–¢—ã –ª—É—á—à–∞—è –º–∞–º–∞ –Ω–∞ —Å–≤–µ—Ç–µ!",
          "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –æ—Ç–ª–∏—á–Ω–æ!",
          "–ú–Ω–µ —Ç–∞–∫ —Ö–æ—Ä–æ—à–æ —Å —Ç–æ–±–æ–π!",
          "–¢—ã –¥–µ–ª–∞–µ—à—å –º–µ–Ω—è —Å—á–∞—Å—Ç–ª–∏–≤—ã–º!",
          "–Ø –ª—é–±–ª—é —Ç–µ–±—è!",
          "–¢—ã –∑–∞–±–æ—Ç–∏—à—å—Å—è –æ–±–æ –º–Ω–µ!",
          "–ú–Ω–µ —Ç–∞–∫ –ø–æ–≤–µ–∑–ª–æ —Å —Ç–æ–±–æ–π!",
          "–¢—ã –º–æ–π —Å–∞–º—ã–π –ª—é–±–∏–º—ã–π —á–µ–ª–æ–≤–µ–∫!"
        ]
        return okPhrases[scoreLevel % okPhrases.length]
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –º–æ–Ω–µ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const getCoinIcon = useCallback((state: BabyState): string => {
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Å–Ω–∞, –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É —Å–Ω–∞
    if (isSleepMode) {
      console.log('üåô getCoinIcon: Sleep mode ON, returning sleep.png')
      return '/icons/sleep.png'
    }
    
    console.log('üåô getCoinIcon: Sleep mode OFF, state:', state)
    switch (state) {
      case 'feeding':
        return '/icons/feeding.png'
      case 'poo':
        return '/icons/poor.png'
      case 'dirty':
        return '/icons/sponge.png'
      case 'all-in':
        // –î–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "all-in" —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –º–µ–∂–¥—É feeding –∏ poor
        return Math.random() < 0.5 ? '/icons/feeding.png' : '/icons/poor.png'
      case 'ok':
        return '/icons/mom.png'
      default:
        // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mom.png –∫–∞–∫ fallback
        return '/icons/mom.png'
    }
  }, [isSleepMode])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–∞ –º–æ–Ω–µ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const getCoinType = useCallback((state: BabyState): 'feeding_coins' | 'diaper_coins' | 'bath_coins' | 'activity_coins' | 'mom_coins' | 'sleep_coins' => {
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Å–Ω–∞, –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫–∏ —Å–Ω–∞
    if (isSleepMode) {
      console.log('üåô getCoinType: Sleep mode ON, returning sleep_coins')
      return 'sleep_coins'
    }
    
    console.log('üåô getCoinType: Sleep mode OFF, state:', state)
    switch (state) {
      case 'feeding':
        return 'feeding_coins'
      case 'poo':
        return 'diaper_coins'
      case 'dirty':
        return 'bath_coins'
      case 'all-in':
        // –î–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "all-in" —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –º–µ–∂–¥—É feeding –∏ poor
        return Math.random() < 0.5 ? 'feeding_coins' : 'diaper_coins'
      case 'ok':
        return 'mom_coins'
      default:
        // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mom_coins –∫–∞–∫ fallback
        return 'mom_coins'
    }
  }, [isSleepMode])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –º–æ–Ω–µ—Ç–∫–∏
  const getRandomCoinPosition = () => {
    const containerWidth = window.innerWidth
    const containerHeight = window.innerHeight
    const coinSize = 48 // —Ä–∞–∑–º–µ—Ä –º–æ–Ω–µ—Ç–∫–∏
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –º–æ–Ω–µ—Ç—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–µ–æ –∏ –≤–æ–∫—Ä—É–≥ –Ω–µ–≥–æ
    const videoAreaWidth = Math.min(400, containerWidth * 0.75) // —à–∏—Ä–∏–Ω–∞ –≤–∏–¥–µ–æ
    const videoAreaHeight = containerHeight * 0.6 // –≤—ã—Å–æ—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–µ–æ
    
    const centerX = containerWidth / 2
    const centerY = containerHeight / 2
    
    return {
      x: centerX + (Math.random() - 0.5) * videoAreaWidth,
      y: centerY + (Math.random() - 0.5) * videoAreaHeight
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –º–æ–Ω–µ—Ç–∫–∏
  const spawnCoin = () => {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ (–º–∞–∫—Å–∏–º—É–º 5)
    setCoins(prev => {
      if (prev.filter(coin => !coin.collected).length >= 5) {
        return prev
      }
      
      const position = getRandomCoinPosition()
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ –∏–∫–æ–Ω–∫—É –º–æ–Ω–µ—Ç–∫–∏
      console.log('üåô spawnCoin called with:', { babyState, isSleepMode })
      const coinType = getCoinType(babyState)
      const coinIcon = getCoinIcon(babyState)
      
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      console.log('üåô Final coin data:', { coinType, coinIcon, isSleepMode })
      console.log('üåô Expected: sleep_coins + sleep.png when sleep mode is ON')
      
      const newCoin = {
        id: Date.now() + Math.random(),
        x: position.x,
        y: position.y,
        collected: false,
        falling: false,
        icon: coinIcon,
        type: coinType
      }
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º –º–æ–Ω–µ—Ç–∫—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–±—Ä–∞–Ω–∞
      setTimeout(() => {
        setCoins(prevCoins => prevCoins.filter(coin => coin.id !== newCoin.id))
      }, 10000)
      
      return [...prev, newCoin]
    })
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –º–æ–Ω–µ—Ç–∫–∏
  const collectCoin = async (coinId: number) => {
    const coin = coins.find(c => c.id === coinId)
    if (!coin || coin.collected) return

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–±—Ä–∞—Ü–∏—é –ø—Ä–∏ —Å–±–æ—Ä–µ –º–æ–Ω–µ—Ç–∫–∏
    if ('vibrate' in navigator) {
      navigator.vibrate(50) // –ö–æ—Ä–æ—Ç–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è 50–º—Å
    }

    // –ü–æ–º–µ—á–∞–µ–º –º–æ–Ω–µ—Ç–∫—É –∫–∞–∫ —Å–æ–±—Ä–∞–Ω–Ω—É—é
    setCoins(prev => prev.map(c => 
      c.id === coinId ? { ...c, collected: true, falling: true } : c
    ))

    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–Ω–µ—Ç–∫—É –≤ –ë–î
      console.log(`Adding ${coin.type} coin to database...`)
      const updatedCoins = await dataService.addCoins(coin.type, 1)
      
      if (updatedCoins) {
        console.log('Coins updated successfully:', updatedCoins)
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
        setFeedingCoins(updatedCoins.feeding_coins)
        setDiaperCoins(updatedCoins.diaper_coins)
        setBathCoins(updatedCoins.bath_coins)
        setActivityCoins(updatedCoins.activity_coins || 0)
        setMomCoins(updatedCoins.mom_coins)
        setSleepCoins(updatedCoins.sleep_coins || 0)
        setScore(updatedCoins.total_score)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        setData(prev => prev ? { ...prev, parentCoins: updatedCoins } : null)
      } else {
        console.warn('Failed to update coins in database')
      }
    } catch (error) {
      console.error('Error saving coins to database:', error)
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è UX
      setScore(prev => prev + 10)
      
      switch (coin.type) {
        case 'feeding_coins':
          setFeedingCoins(prev => prev + 1)
          break
        case 'diaper_coins':
          setDiaperCoins(prev => prev + 1)
          break
        case 'bath_coins':
          setBathCoins(prev => prev + 1)
          break
        case 'activity_coins':
          setActivityCoins(prev => prev + 1)
          break
        case 'mom_coins':
          setMomCoins(prev => prev + 1)
          break
        case 'sleep_coins':
          setSleepCoins(prev => prev + 1)
          break
      }
    }
    
    // –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—á–∫–æ–≤
    setScoreAnimation(true)
    setTimeout(() => setScoreAnimation(false), 300)
    
    // –£–±–∏—Ä–∞–µ–º –º–æ–Ω–µ—Ç–∫—É —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
      setCoins(prev => prev.filter(c => c.id !== coinId))
    }, 1800)
  }



  if (loading) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="text-center">
          <div className="w-8 h-8 border-2 border-blue-500 border-t-transparent rounded-3xl animate-spin mx-auto mb-2"></div>
          <p className="text-sm text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ª—ã—à–∞...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="tamagotchi-container relative">
      {/* –ú–æ–Ω–µ—Ç–∫–∏ –¥–ª—è —Å–±–æ—Ä–∞ - –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */}
      {coins.map(coin => (
        <div
          key={coin.id}
          className={`absolute w-12 h-12 transition-all duration-200 cursor-pointer ${
            coin.falling ? 'coin-falling' : coin.collected ? 'opacity-0 scale-0' : 'coin-float'
          }`}
          style={{
            left: `${coin.x - 24}px`,
            top: `${coin.y - 24}px`,
            zIndex: 20
          }}
          onClick={() => !coin.collected && collectCoin(coin.id)}
        >
          <img 
            src={coin.icon} 
            alt="–ú–æ–Ω–µ—Ç–∫–∞" 
            className="w-full h-full object-contain hover:scale-110 transition-transform duration-200"
          />
        </div>
      ))}

      {/* –°—Ç–æ–ø–∫–∏ –º–æ–Ω–µ—Ç–æ–∫ - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ */}
      <div className="tamagotchi-coins text-center">
        <div className="flex justify-center gap-1 flex-wrap items-center">
          {/* –°—Ç–æ–ø–∫–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è */}
          {feedingCoins > 0 && (
            <div className="flex items-center gap-1 bg-pink-100 px-1.5 py-0.5 rounded-3xl">
              <img src="/icons/feeding.png" alt="–ö–æ—Ä–º–ª–µ–Ω–∏–µ" className="w-3 h-3" />
              <span className="text-xs font-bold text-pink-800">{feedingCoins}</span>
            </div>
          )}
          
          {/* –°—Ç–æ–ø–∫–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤ */}
          {diaperCoins > 0 && (
            <div className="flex items-center gap-1 bg-yellow-100 px-1.5 py-0.5 rounded-3xl">
              <img src="/icons/poor.png" alt="–ü–æ–¥–≥—É–∑–Ω–∏–∫" className="w-3 h-3" />
              <span className="text-xs font-bold text-yellow-800">{diaperCoins}</span>
            </div>
          )}
          
          {/* –°—Ç–æ–ø–∫–∞ –∫—É–ø–∞–Ω–∏—è */}
          {bathCoins > 0 && (
            <div className="flex items-center gap-1 bg-purple-100 px-1.5 py-0.5 rounded-3xl">
              <img src="/icons/sponge.png" alt="–ö—É–ø–∞–Ω–∏–µ" className="w-3 h-3" />
              <span className="text-xs font-bold text-purple-800">{bathCoins}</span>
            </div>
          )}
          
          {/* –°—Ç–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
          {activityCoins > 0 && (
            <div className="flex items-center gap-1 bg-indigo-100 px-1.5 py-0.5 rounded-3xl">
              <img src="/icons/baby.png" alt="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å" className="w-3 h-3" />
              <span className="text-xs font-bold text-indigo-800">{activityCoins}</span>
            </div>
          )}
          
          {/* –°—Ç–æ–ø–∫–∞ –æ–±—ã—á–Ω—ã—Ö –º–æ–Ω–µ—Ç–æ–∫ */}
          {momCoins > 0 && (
            <div className="flex items-center gap-1 bg-green-100 px-1.5 py-0.5 rounded-3xl">
              <img src="/icons/mom.png" alt="–ú–æ–Ω–µ—Ç–∫–∞" className="w-3 h-3" />
              <span className="text-xs font-bold text-green-800">{momCoins}</span>
            </div>
          )}
          
          {/* –°—Ç–æ–ø–∫–∞ –º–æ–Ω–µ—Ç–æ–∫ —Å–Ω–∞ */}
          {sleepCoins > 0 && (
            <div className="flex items-center gap-1 bg-indigo-100 px-1.5 py-0.5 rounded-3xl">
              <img src="/icons/sleep.png" alt="–°–æ–Ω" className="w-3 h-3" />
              <span className="text-xs font-bold text-indigo-800">{sleepCoins}</span>
            </div>
          )}
          
          {/* –û–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –æ—á–∫–æ–≤ */}
          <div className={`inline-flex items-center gap-1 bg-gray-100 px-2 py-0.5 rounded-3xl transition-all duration-300 ${
            scoreAnimation ? 'score-animation bg-gray-200 shadow-lg' : 'scale-100'
          }`}>
            <span className="text-xs font-bold text-gray-800">‚≠ê</span>
            <span className={`text-xs font-bold text-gray-800 transition-all duration-300 ${
              scoreAnimation ? 'text-gray-900' : ''
            }`}>{score}</span>
          </div>
        </div>
      </div>

      {/* GIF/Video –º–∞–ª—ã—à–∞ - –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ */}
      <div className="tamagotchi-video-container">
        <div className="relative inline-block">
          {isSleepMode ? (
            <video
              key="sleep-video"
              src={getGifSource(babyState)}
              className="tamagotchi-video w-[75vw] max-w-[400px] object-cover rounded-3xl cursor-pointer"
              autoPlay
              muted
              playsInline
            />
          ) : (
            <img
              key={babyState} // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º GIF –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
              src={getGifSource(babyState)}
              alt={`–ú–∞–ª—ã—à –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ${babyState}`}
              className="tamagotchi-video w-[75vw] max-w-[400px] object-cover rounded-3xl cursor-pointer"
            />
          )}
          

          {/* –¢—É–º–±–ª–µ—Ä —Ä–µ–∂–∏–º–∞ —Å–Ω–∞ - —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π */}
          <div className="absolute -top-3 left-2">
            <button
              onClick={toggleSleepMode}
              className={`sleep-toggle ${isSleepMode ? 'active' : 'inactive'}`}
              aria-label={isSleepMode ? '–í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Å–Ω–∞' : '–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Å–Ω–∞'}
            >
              <div className="sleep-toggle-thumb">
                {isSleepMode ? (
                  <span className="text-lg">üò¥</span>
                ) : (
                  <span className="text-lg">üëÅÔ∏è</span>
                )}
              </div>
            </button>
          </div>

        </div>
        
        <p className="text-xs font-medium text-gray-700 mt-2">
          {getStateDescription(babyState)}
        </p>
      </div>

      {/* –õ–æ—Ç–æ–∫ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π */}
      <div className="tamagotchi-inventory bg-white/80 backdrop-blur-sm rounded-3xl shadow-sm border border-gray-100">
        <h2 className="text-xs font-semibold text-gray-900 mb-2 text-center">üõ†Ô∏è –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</h2>
        
        <div className="grid grid-cols-4 gap-2">
          {/* –ü–æ–¥–≥—É–∑–Ω–∏–∫ */}
          <div 
            onClick={() => handleItemClick('diaper')}
            className="flex flex-col items-center p-2 bg-gray-50 rounded-3xl hover:bg-gray-100 transition-colors cursor-pointer"
          >
            <img 
              src="/icons/diaper.png" 
              alt="–ü–æ–¥–≥—É–∑–Ω–∏–∫" 
              className="w-10 h-10 object-contain"
            />
          </div>

          {/* –ë—É—Ç—ã–ª–æ—á–∫–∞ */}
          <div 
            onClick={() => handleItemClick('feeding')}
            className="flex flex-col items-center p-2 bg-gray-50 rounded-3xl hover:bg-gray-100 transition-colors cursor-pointer"
          >
            <img 
              src="/icons/feeding.png" 
              alt="–ë—É—Ç—ã–ª–æ—á–∫–∞" 
              className="w-10 h-10 object-contain"
            />
          </div>

          {/* –ì—É–±–∫–∞ */}
          <div 
            onClick={() => handleItemClick('bath')}
            className="flex flex-col items-center p-2 bg-gray-50 rounded-3xl hover:bg-gray-100 transition-colors cursor-pointer"
          >
            <img 
              src="/icons/sponge.png" 
              alt="–ì—É–±–∫–∞" 
              className="w-10 h-10 object-contain"
            />
          </div>

          {/* –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */}
          <div 
            onClick={() => handleItemClick('activity')}
            className="flex flex-col items-center p-2 bg-gray-50 rounded-3xl hover:bg-gray-100 transition-colors cursor-pointer"
          >
            <img 
              src="/icons/activity.png" 
              alt="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å" 
              className="w-10 h-10 object-contain"
            />
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π */}
      <QuickActionModal
        isOpen={modalOpen}
        onClose={() => setModalOpen(false)}
        actionType={modalAction}
        onSuccess={handleModalSuccess}
      />
    </div>
  )
}
