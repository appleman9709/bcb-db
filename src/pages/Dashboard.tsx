import { useEffect, useState } from 'react'
import StatCard from '../components/StatCard'
import QuickAction from '../components/QuickAction'
import QuickActionModal from '../components/QuickActionModal'
import Card from '../components/Card'
import Button from '../components/Button'
import { dataService, Feeding, Diaper, SleepSession, Activity } from '../services/dataService'

export default function Dashboard() {
  const [data, setData] = useState<{
    lastFeeding: Feeding | null
    lastDiaper: Diaper | null
    lastSleep: SleepSession | null
    recentActivities: Activity[]
    todayStats: any
  } | null>(null)
  const [loading, setLoading] = useState(true)
  const [modalOpen, setModalOpen] = useState(false)
  const [modalAction, setModalAction] = useState<'feeding' | 'diaper' | 'sleep' | 'play' | 'medicine' | 'note'>('feeding')

  useEffect(() => {
    fetchData()
  }, [])

  const fetchData = async () => {
    try {
      setLoading(true)
      const [lastFeeding, lastDiaper, sleepSessions, recentActivities, todayStats] = await Promise.all([
        dataService.getLastFeeding(),
        dataService.getLastDiaper(),
        dataService.getSleepSessions(1),
        dataService.getActivities(3),
        dataService.getTodayStats()
      ])

      setData({
        lastFeeding,
        lastDiaper,
        lastSleep: sleepSessions[0] || null,
        recentActivities,
        todayStats
      })
    } catch (error) {
      console.error('Error fetching data:', error)
    } finally {
      setLoading(false)
    }
  }

  const getTimeAgo = (timestamp: string) => {
    const now = new Date()
    const time = new Date(timestamp)
    const diffInMinutes = Math.floor((now.getTime() - time.getTime()) / (1000 * 60))
    
    if (diffInMinutes < 60) {
      return `${diffInMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`
    } else if (diffInMinutes < 1440) {
      return `${Math.floor(diffInMinutes / 60)} —á –Ω–∞–∑–∞–¥`
    } else {
      return `${Math.floor(diffInMinutes / 1440)} –¥–Ω –Ω–∞–∑–∞–¥`
    }
  }

  const handleQuickAction = (action: 'feeding' | 'diaper' | 'sleep' | 'play' | 'medicine' | 'note') => {
    setModalAction(action)
    setModalOpen(true)
  }

  const handleModalSuccess = () => {
    fetchData() // Refresh data after successful action
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 p-6">
        <div className="max-w-7xl mx-auto">
          <div className="animate-pulse">
            <div className="h-8 bg-gray-200 rounded w-1/4 mb-6"></div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
              {[...Array(4)].map((_, i) => (
                <div key={i} className="h-32 bg-gray-200 rounded-2xl"></div>
              ))}
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üë∂</h1>
          <p className="text-gray-600">–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–∞—à–µ–≥–æ –º–∞–ª—ã—à–∞</p>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <StatCard
            title="–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ"
            value={data?.lastFeeding ? getTimeAgo(data.lastFeeding.timestamp) : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
            icon="üçº"
            color="blue"
            subtitle={data?.lastFeeding ? new Date(data.lastFeeding.timestamp).toLocaleString() : ''}
          />
          <StatCard
            title="–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–º–µ–Ω–∞"
            value={data?.lastDiaper ? getTimeAgo(data.lastDiaper.timestamp) : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
            icon="üë∂"
            color="green"
            subtitle={data?.lastDiaper ? new Date(data.lastDiaper.timestamp).toLocaleString() : ''}
          />
          <StatCard
            title="–°–æ–Ω —Å–µ–≥–æ–¥–Ω—è"
            value={data?.todayStats ? `${Math.floor(data.todayStats.sleepMinutes / 60)}—á ${data.todayStats.sleepMinutes % 60}–º` : '0—á 0–º'}
            icon="üò¥"
            color="purple"
            subtitle={`${data?.todayStats?.sleepSessions || 0} –ø–µ—Ä–∏–æ–¥–æ–≤ —Å–Ω–∞`}
          />
          <StatCard
            title="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è"
            value={data?.todayStats ? `${data.todayStats.activities}` : '0'}
            icon="üéØ"
            color="pink"
            subtitle="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –¥–µ–Ω—å"
          />
        </div>

        {/* Quick Actions */}
        <div className="mb-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-6">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <QuickAction
              title="–ö–æ—Ä–º–ª–µ–Ω–∏–µ"
              description="–ó–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è –∫–æ—Ä–º–ª–µ–Ω–∏—è"
              icon="üçº"
              onClick={() => handleQuickAction('feeding')}
              variant="primary"
            />
            <QuickAction
              title="–°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞"
              description="–û—Ç–º–µ—Ç–∏—Ç—å —Å–º–µ–Ω—É –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞"
              icon="üë∂"
              onClick={() => handleQuickAction('diaper')}
              variant="success"
            />
            <QuickAction
              title="–°–æ–Ω"
              description="–ó–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è —Å–Ω–∞"
              icon="üò¥"
              onClick={() => handleQuickAction('sleep')}
              variant="purple"
            />
            <QuickAction
              title="–ò–≥—Ä–∞"
              description="–û—Ç–º–µ—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
              icon="üéØ"
              onClick={() => handleQuickAction('play')}
              variant="warning"
            />
            <QuickAction
              title="–õ–µ–∫–∞—Ä—Å—Ç–≤–æ"
              description="–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤"
              icon="üíä"
              onClick={() => handleQuickAction('medicine')}
              variant="danger"
            />
            <QuickAction
              title="–ó–∞–º–µ—Ç–∫–∞"
              description="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"
              icon="üìù"
              onClick={() => handleQuickAction('note')}
              variant="secondary"
            />
          </div>
        </div>

        {/* Recent Activity */}
        <div className="mb-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-6">–ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h2>
          <Card>
            <div className="space-y-4">
              {data?.lastFeeding && (
                <div className="flex items-center space-x-4 p-4 bg-blue-50 rounded-xl">
                  <div className="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center text-white">
                    üçº
                  </div>
                  <div className="flex-1">
                    <p className="font-medium text-gray-900">–ö–æ—Ä–º–ª–µ–Ω–∏–µ</p>
                    <p className="text-sm text-gray-600">{getTimeAgo(data.lastFeeding.timestamp)}</p>
                  </div>
                  <div className="text-sm text-gray-500">{new Date(data.lastFeeding.timestamp).toLocaleTimeString()}</div>
                </div>
              )}
              
              {data?.lastDiaper && (
                <div className="flex items-center space-x-4 p-4 bg-green-50 rounded-xl">
                  <div className="w-10 h-10 bg-green-500 rounded-full flex items-center justify-center text-white">
                    üë∂
                  </div>
                  <div className="flex-1">
                    <p className="font-medium text-gray-900">–°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞</p>
                    <p className="text-sm text-gray-600">{getTimeAgo(data.lastDiaper.timestamp)}</p>
                  </div>
                  <div className="text-sm text-gray-500">{new Date(data.lastDiaper.timestamp).toLocaleTimeString()}</div>
                </div>
              )}
              
              {data?.lastSleep && (
                <div className="flex items-center space-x-4 p-4 bg-purple-50 rounded-xl">
                  <div className="w-10 h-10 bg-purple-500 rounded-full flex items-center justify-center text-white">
                    üò¥
                  </div>
                  <div className="flex-1">
                    <p className="font-medium text-gray-900">–°–æ–Ω</p>
                    <p className="text-sm text-gray-600">{getTimeAgo(data.lastSleep.start_time)}</p>
                  </div>
                  <div className="text-sm text-gray-500">
                    {data.lastSleep.duration_minutes ? `${Math.floor(data.lastSleep.duration_minutes / 60)}—á ${data.lastSleep.duration_minutes % 60}–º` : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
                  </div>
                </div>
              )}

              {data?.recentActivities.map((activity, index) => (
                <div key={activity.id} className="flex items-center space-x-4 p-4 bg-yellow-50 rounded-xl">
                  <div className="w-10 h-10 bg-yellow-500 rounded-full flex items-center justify-center text-white">
                    üéØ
                  </div>
                  <div className="flex-1">
                    <p className="font-medium text-gray-900">{activity.activity_type}</p>
                    <p className="text-sm text-gray-600">{getTimeAgo(activity.timestamp)}</p>
                  </div>
                  <div className="text-sm text-gray-500">{new Date(activity.timestamp).toLocaleTimeString()}</div>
                </div>
              ))}

              {(!data?.lastFeeding && !data?.lastDiaper && !data?.lastSleep && (!data?.recentActivities || data.recentActivities.length === 0)) && (
                <div className="text-center py-8 text-gray-500">
                  <div className="text-4xl mb-2">üìù</div>
                  <p>–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π</p>
                  <p className="text-sm">–ù–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –º–∞–ª—ã—à–∞!</p>
                </div>
              )}
            </div>
          </Card>
        </div>

        {/* Tips */}
        <Card className="bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200">
          <div className="flex items-start space-x-4">
            <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl flex items-center justify-center text-white text-xl">
              üí°
            </div>
            <div className="flex-1">
              <h3 className="font-semibold text-gray-900 mb-2">–°–æ–≤–µ—Ç –¥–Ω—è</h3>
              <p className="text-gray-700">
                –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2-3 —á–∞—Å–∞ –ø–æ–º–æ–≥–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –¥–Ω—è –¥–ª—è –≤–∞—à–µ–≥–æ –º–∞–ª—ã—à–∞. 
                –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤—Ä–µ–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–ª–æ–∫–∞!
              </p>
            </div>
          </div>
        </Card>

        {/* Quick Action Modal */}
        <QuickActionModal
          isOpen={modalOpen}
          onClose={() => setModalOpen(false)}
          actionType={modalAction}
          onSuccess={handleModalSuccess}
        />
      </div>
    </div>
  )
}
