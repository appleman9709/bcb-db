const sharp = require('sharp');
const fs = require('fs');
const path = require('path');

async function generateIcons() {
  const iconsDir = path.join(__dirname, '..', 'public', 'icons');
  const svgPath = path.join(iconsDir, 'icon.svg');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ SVG —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!fs.existsSync(svgPath)) {
    console.error('SVG —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', svgPath);
    return;
  }

  // –ß–∏—Ç–∞–µ–º SVG —Ñ–∞–π–ª
  const svgBuffer = fs.readFileSync(svgPath);
  
  // –†–∞–∑–º–µ—Ä—ã –∏–∫–æ–Ω–æ–∫ –¥–ª—è PWA
  const sizes = [16, 32, 72, 96, 128, 144, 152, 180, 192, 384, 512];
  
  console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PNG –∏–∫–æ–Ω–æ–∫ –∏–∑ SVG...');
  
  for (const size of sizes) {
    try {
      const outputPath = path.join(iconsDir, `icon-${size}x${size}.png`);
      
      await sharp(svgBuffer)
        .resize(size, size, {
          kernel: sharp.kernel.lanczos3,
          fit: 'contain',
          background: { r: 0, g: 0, b: 0, alpha: 0 }
        })
        .png({
          quality: 100,
          compressionLevel: 9
        })
        .toFile(outputPath);
      
      console.log(`‚úì –°–æ–∑–¥–∞–Ω–∞ –∏–∫–æ–Ω–∫–∞ ${size}x${size}: ${outputPath}`);
    } catch (error) {
      console.error(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∫–æ–Ω–∫–∏ ${size}x${size}:`, error.message);
    }
  }
  
  // –°–æ–∑–¥–∞–µ–º —Ç–∞–∫–∂–µ source —Ñ–∞–π–ª –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  try {
    const sourcePath = path.join(iconsDir, 'icon-source-512.png');
    await sharp(svgBuffer)
      .resize(512, 512, {
        kernel: sharp.kernel.lanczos3,
        fit: 'contain',
        background: { r: 0, g: 0, b: 0, alpha: 0 }
      })
      .png({
        quality: 100,
        compressionLevel: 9
      })
      .toFile(sourcePath);
    
    console.log(`‚úì –°–æ–∑–¥–∞–Ω source —Ñ–∞–π–ª: ${sourcePath}`);
  } catch (error) {
    console.error('‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ source —Ñ–∞–π–ª–∞:', error.message);
  }
  
  console.log('\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
generateIcons().catch(console.error);
